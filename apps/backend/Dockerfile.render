# Render-optimized Dockerfile for Planning Poker Backend
FROM node:18-alpine AS base

# Set working directory
WORKDIR /app

# Copy root package files first (for monorepo setup)
COPY package*.json ./
COPY turbo.json ./

# Copy shared package
COPY shared ./shared

# Copy backend package files
COPY apps/backend/package*.json ./apps/backend/

# Install dependencies for the entire monorepo
RUN npm ci --workspace=backend --workspace=shared

# Build the shared package first
WORKDIR /app/shared
RUN npm run build

# Copy backend source code
WORKDIR /app/apps/backend
COPY apps/backend/ .

# Build the backend application
RUN npm run build

# Production stage
FROM node:18-alpine AS production
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

# Copy built application and dependencies
COPY --from=base --chown=nestjs:nodejs /app/apps/backend/dist ./dist
COPY --from=base --chown=nestjs:nodejs /app/apps/backend/package*.json ./
COPY --from=base --chown=nestjs:nodejs /app/node_modules ./node_modules

# Switch to non-root user
USER nestjs

# Expose port (Render will set PORT environment variable)
EXPOSE $PORT

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:$PORT/health || exit 1

# Start the application
CMD ["node", "dist/main"]
